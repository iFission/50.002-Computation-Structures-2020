.include "../nominal.jsim"
.include "../stdcell.jsim"
.include "../lab6ctl.jsim"

.subckt ctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr
xctl vdd 0 0 id[31:26]
    + pcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
    + $memory width=18 nlocations=64 contents=(

        + 0b000000000000000000    // OPCODE = 000000,
        + 0b000000000000000000    // OPCODE = 000001,
        + 0b000000000000000000    // OPCODE = 000010,
        + 0b000000000000000000    // OPCODE = 000011,
        + 0b000000000000000000    // OPCODE = 000100,
        + 0b000000000000000000    // OPCODE = 000101,
        + 0b000000000000000000    // OPCODE = 000110,
        + 0b000000000000000000    // OPCODE = 000111,
        + 0b000000000000000000    // OPCODE = 001000,
        + 0b000000000000000000    // OPCODE = 001001, 
        + 0b000000000000000000    // OPCODE = 001010,
        + 0b000000000000000000    // OPCODE = 001011,
        + 0b000000000000000000    // OPCODE = 001100,
        + 0b000000000000000000    // OPCODE = 001101,
        + 0b000000000000000000    // OPCODE = 001110,
        + 0b000000000000000000    // OPCODE = 001111,
        + 0b000000000000000000    // OPCODE = 010000,
        + 0b000000000000000000    // OPCODE = 010001,
        + 0b000000000000000000    // OPCODE = 010010,
        + 0b000000000000000000    // OPCODE = 010011,
        + 0b000000000000000000    // OPCODE = 010100,
        + 0b000000000000000000    // OPCODE = 010101,
        + 0b000000000000000000    // OPCODE = 010110,
        + 0b000000000000000000    // OPCODE = 010111,
        + 0b000000100000010110    // OPCODE = 011000, LD
        + 0b000001100000000001    // OPCODE = 011001, ST
        + 0b000000000000000000    // OPCODE = 011010, 
        + 0b000000000000000000    // OPCODE = 011011, 
        + 0b000000000000000000    // OPCODE = 011100, 
        + 0b000000000000000000    // OPCODE = 011101, 
        + 0b000000000000000000    // OPCODE = 011110, 
        + 0b000000000000000000    // OPCODE = 011111, 
        + 0b000000000000001100    // OPCODE = 100000, ADD
        + 0b000000000000101100    // OPCODE = 100001, SUB
        + 0b000000000000000000    // OPCODE = 100010, 
        + 0b000000000000000000    // OPCODE = 100011, 
        + 0b000000011001101100    // OPCODE = 100100, CMPEQ
        + 0b000000011010101100    // OPCODE = 100101, CMPLT
        + 0b000000011011101100    // OPCODE = 100110, CMPLE
        + 0b000000000000000000    // OPCODE = 100111, 
        + 0b000000001100001100    // OPCODE = 101000, AND
        + 0b000000001111001100    // OPCODE = 101001, OR
        + 0b000000001011001100    // OPCODE = 101010, XOR
        + 0b000000000000000000    // OPCODE = 101011, 
        + 0b000000010000001100    // OPCODE = 101100, SHL
        + 0b000000010000101100    // OPCODE = 101101, SHR
        + 0b000000010001101100    // OPCODE = 101110, SRA
        + 0b000000000000000000    // OPCODE = 101111, 
        + 0b000000100000001100    // OPCODE = 110000, ADDC
        + 0b000000100000101100    // OPCODE = 110001, SUBC
        + 0b000000000000000000    // OPCODE = 110010, 
        + 0b000000000000000000    // OPCODE = 110011, 
        + 0b000000111001101100    // OPCODE = 110100, CMPEQC
        + 0b000000111010101100    // OPCODE = 110101, CMPLTC
        + 0b000000111011101100    // OPCODE = 110110, CMPLEC
        + 0b000000000000000000    // OPCODE = 110111,       
        + 0b000000101100001100    // OPCODE = 111000, ANDC
        + 0b000000101111001100    // OPCODE = 111001, ORC
        + 0b000000101011001100    // OPCODE = 111010, XORC
        + 0b000000000000000000    // OPCODE = 111011,
        + 0b000000110000001100    // OPCODE = 111100, SHLC
        + 0b000000110000101100    // OPCODE = 111101, SHRC
        + 0b000000110001101100    // OPCODE = 111110, SRAC
        + 0b000000000000000000    // OPCODE = 111111,      
        + )

// set WR to 0 when RESET=1
Xmux reset xwr 0 wr mux2 

.ends