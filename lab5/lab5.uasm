| include instruction macros and test jig
.include ../beta.uasm
.include ../lab5checkoff.uasm

count_bull_cows:                        | your subroutine must have this name
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    PUSH(R1)                            | int bulls
    PUSH(R2)                            | int cows
    PUSH(R3)                            | a
    PUSH(R4)                            | b
    PUSH(R5)                            | int i
    PUSH(R6)                            | int j
    PUSH(R7)                            | int btemp
    PUSH(R8)                            | int atry
    PUSH(R9)                            | int btry
    PUSH(R10)                           | int mask
    PUSH(R11)                           | a & mask
    PUSH(R12)                           | b & mask
    PUSH(R13)

    LD(BP,-12,R3)                       | a
    LD(BP,-16,R4)                       | b
    
    CMOVE(0,R1)                         | bulls = 0
    CMOVE(0xF,R10)                      | mask = 0xF
    CMOVE(0,R5)                         | i = 0
    BR(begin_for_loop_1, LP)            | execute for loop 1

    CMOVE(0,R2)                         | cows = 0
    CMOVE(0,R5)                         | i = 0
    BR(begin_for_loop_2, LP)            | execute for loop 2

    SHLC(R1,4,R1)                       | bulls << 4
    ADD(R1,R2,R0)                       | (bulls << 4) + cows

    POP(R13)
    POP(R12)
    POP(R11)
    POP(R10)
    POP(R9)
    POP(R8)
    POP(R7)
    POP(R6)
    POP(R5)
    POP(R4)
    POP(R3)
    POP(R2)
    POP(R1)

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)
    RTN()


begin_for_loop_1:                       | for (i = 0; i < 4; i = i + 1)
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    CMPLTC(R5,4,R13)                    | i < 4
    ADDC(R5,1,R5)                       | i = i + 1
    BT(R13,body_for_loop_1,LP)

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)
    JMP(LP)

body_for_loop_1:
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    AND(R3,R10,R11)                     | a & mask
    AND(R4,R10,R12)                     | b & mask
    CMPEQ(R11,R12,R13)                  | if ((a & mask) == (b & mask))
    BT(R13,if_loop_1,LP)

    SHLC(R10,4,R10)                     | mask = mask << 4

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)

    BR(begin_for_loop_1)

if_loop_1:
    ADDC(R1,1,R1)                       | bulls = bulls + 1
    OR(R3,R10,R3)                       | a = a | mask
    OR(R4,R10,R4)                       | b = b | mask

    JMP(LP)

begin_for_loop_2:                       | for (i = 0; i < 4; i = i + 1)
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    CMPLTC(R5,4,R13)                    | i < 4
    ADDC(R5,1,R5)                       | i = i + 1
    BT(R13,body_for_loop_2,LP)

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)
    JMP(LP)

body_for_loop_2:                        | for (i = 0; i < 4; i = i + 1)
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    ANDC(R3,0xF,R8)                     | atry = a & 0xF
    SHRC(R3,4,R3)                       | a = a >> 4

    CMPEQC(R8,0xF,R13)                  | atry == 0xF
    BF(R13, if_loop_2, LP)

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)

    BR(begin_for_loop_2)

if_loop_2:
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    ADD(R4,R31,R7)                      | btemp = b
    CMOVE(0xF,R10)                      | mask = 0xF

    CMOVE(0,R6)                         | j = 0
    BR(begin_for_loop_3, LP)

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)
    JMP(LP)

begin_for_loop_3:                       | for (j = 0; j < 4; j = j + 1)
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    CMPLTC(R6,4,R13)                    | if j < 4
    ADDC(R6,1,R6)                       | j = j + 1
    BT(R13,body_for_loop_3,LP)

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)
    JMP(LP)

body_for_loop_3:
    PUSH(LP)                            | standard subroutine entry sequence
    PUSH(BP)
    MOVE(SP, BP)

    ANDC(R7,0xF,R9)                     | btry = btemp & 0xF
    SHRC(R7,4,R7)                       | btemp = btemp >> 4

    CMPEQ(R9,R8,R13)                    | btry == atry
    BT(R13,if_loop_3)                   | branch true

    SHLC(R10,4,R10)                     | mask = mask << 4

    MOVE(BP,SP)                         | standard subroutine exit sequence
    POP(BP)
    POP(LP)

    BR(begin_for_loop_3)

if_loop_3:
    ADDC(R2,1,R2)                       | cows = cows + 1
    OR(R4,R10,R4)                       | b = b | mask

    BR(begin_for_loop_2)

StackBase:
    LONG(.+4)                           | Pointer to bottom of stack
    . = .+0x1000                        | Reserve space for stack...
